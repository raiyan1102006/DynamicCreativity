{"ast":null,"code":"import _classCallCheck from \"/Users/famousclark/Sites/creativity-project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/famousclark/Sites/creativity-project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/famousclark/Sites/creativity-project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/famousclark/Sites/creativity-project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/famousclark/Sites/creativity-project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/famousclark/Sites/creativity-project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/famousclark/Sites/creativity-project/src/components/TaskTimerScreen.jsx\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Button, Header, Modal, Container, Icon } from 'semantic-ui-react';\n\nvar TaskTimerScreen =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(TaskTimerScreen, _Component);\n\n  function TaskTimerScreen(props) {\n    var _this;\n\n    _classCallCheck(this, TaskTimerScreen);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TaskTimerScreen).call(this, props)); // Bind all methods to 'this' context here\n\n    _this.state = {\n      elapsed: 240,\n      interval: ''\n    };\n\n    _this.onHandleOpen = function () {\n      if (_this.state.inputOne === ' ' || _this.state.inputTwo === ' ' || _this.state.inputThree === ' ' || _this.state.inputFour === '' || _this.state.inputFive === ' ' || _this.state.inputSix === ' ') {\n        _this.setState({\n          showErr: true\n        });\n      } else {\n        _this.show('blurring');\n\n        _this.setState({\n          modalOpen: true\n        });\n\n        return true;\n      }\n\n      return false;\n    };\n\n    _this.onHandleClose = function () {\n      _this.setState({\n        modalOpen: false\n      });\n    };\n\n    _assertThisInitialized(_assertThisInitialized(_this)).onHandleStartTimer = _this.onHandleStartTimer.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _assertThisInitialized(_assertThisInitialized(_this)).onHandleOpen = _this.onHandleOpen.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _assertThisInitialized(_assertThisInitialized(_this)).onHandleClose = _this.onHandleClose.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _assertThisInitialized(_assertThisInitialized(_this)).onGetSeconds = _this.onGetSeconds.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _assertThisInitialized(_assertThisInitialized(_this)).onGetMinutes = _this.onGetMinutes.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(TaskTimerScreen, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {}\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.props.showTask) {\n        var interval = setInterval(this.onHandleStartTimer, 1000);\n        this.setState({\n          interval: interval\n        });\n      }\n    }\n  }, {\n    key: \"componentWillUpdate\",\n    value: function componentWillUpdate(nextProps, nextState) {\n      return true;\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      clearInterval(this.state.interval);\n    }\n  }, {\n    key: \"onGetSeconds\",\n    value: function onGetSeconds() {\n      return ('0' + this.state.elapsed % 60).slice(-2);\n    }\n  }, {\n    key: \"onGetMinutes\",\n    value: function onGetMinutes() {\n      return Math.floor(this.state.elapsed / 60);\n    }\n  }, {\n    key: \"onHandleStartTimer\",\n    value: function onHandleStartTimer() {\n      var dispatch = this.props.dispatch;\n\n      if (this.state.elapsed <= 0) {\n        clearInterval(this.state.interval);\n\n        if (this.props.showTask) {\n          dispatch({\n            type: 'FETCH_NETWORK',\n            payload: false\n          });\n        } else if (this.props.showNetwork) {\n          dispatch({\n            type: 'FETCH_SHOW_USERS',\n            payload: false\n          });\n        }\n      } else {\n        this.setState({\n          elapsed: this.state.elapsed - 1\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var modalContent = \"In this next section, we will show you what others in your network came up with! You will be able to edit your own list if you get any new ideas! But remember only UNIQUE ideas count - if you just copy from others, we'll know :p\";\n      var modalTimeContent = \"This is a time section\";\n      var isTimerActive = this.props.showTask;\n      var mainSegmentStyles = {\n        height: \"100%\",\n        paddingBottom: \"0em\"\n      };\n      var timeSegmentStyles = {\n        height: \"10em\"\n      };\n      var timeStyles = {\n        paddingTop: \"2em\",\n        fontSize: \"3em\",\n        color: \"#00B5AD\"\n      };\n      var welcomeStyles = {\n        color: \"#fff\",\n        paddingTop: \"2em\"\n      };\n      var textStyles = {\n        fontSize: \"1.4em\",\n        lineHeight: \"2em\"\n      };\n      var modalStyles = {\n        paddingRight: \"2em\"\n      };\n      return React.createElement(\"div\", {\n        className: \"ui vertical segment\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, React.createElement(Container, {\n        textAlign: \"center\",\n        style: timeSegmentStyles,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, React.createElement(Header, {\n        style: timeStyles,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, this.onGetMinutes(), \":\", this.onGetSeconds())));\n    }\n  }]);\n\n  return TaskTimerScreen;\n}(Component);\n\nfunction mapStateToProps(state) {\n  return {\n    showTask: state.showTask,\n    showNetwork: state.showNetwork,\n    showUsers: state.showUsers\n  };\n}\n\nexport default connect(mapStateToProps)(TaskTimerScreen);","map":{"version":3,"sources":["/Users/famousclark/Sites/creativity-project/src/components/TaskTimerScreen.jsx"],"names":["React","Component","connect","Button","Header","Modal","Container","Icon","TaskTimerScreen","props","state","elapsed","interval","onHandleOpen","inputOne","inputTwo","inputThree","inputFour","inputFive","inputSix","setState","showErr","show","modalOpen","onHandleClose","onHandleStartTimer","bind","onGetSeconds","onGetMinutes","showTask","setInterval","nextProps","nextState","clearInterval","slice","Math","floor","dispatch","type","payload","showNetwork","modalContent","modalTimeContent","isTimerActive","mainSegmentStyles","height","paddingBottom","timeSegmentStyles","timeStyles","paddingTop","fontSize","color","welcomeStyles","textStyles","lineHeight","modalStyles","paddingRight","mapStateToProps","showUsers"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport { connect } from 'react-redux';\n\nimport {Button, Header, Modal, Container, Icon} from 'semantic-ui-react';\n\nclass TaskTimerScreen extends Component {\n\n  state = {elapsed: 240, interval: ''}\n\n  constructor(props) {\n    super(props);\n    // Bind all methods to 'this' context here\n    (this: any).onHandleStartTimer = this.onHandleStartTimer.bind(this);\n    (this: any).onHandleOpen = this.onHandleOpen.bind(this);\n    (this: any).onHandleClose = this.onHandleClose.bind(this);\n    (this: any).onGetSeconds = this.onGetSeconds.bind(this);\n    (this: any).onGetMinutes = this.onGetMinutes.bind(this);\n  }\n\n  componentWillMount() {\n\n  }\n\n  componentDidMount() {\n    if (this.props.showTask) {\n      var interval = setInterval(this.onHandleStartTimer, 1000);\n      this.setState({interval: interval});\n    }\n  }\n\n  componentWillUpdate(nextProps, nextState){\n    return true;\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.state.interval);\n  }\n\n  onGetSeconds(){\n    return ('0' + this.state.elapsed % 60).slice(-2);\n  }\n\n  onGetMinutes(){\n    return Math.floor(this.state.elapsed / 60);\n  }\n\n  onHandleStartTimer(){\n    const{dispatch} = this.props;\n    if (this.state.elapsed <= 0) {\n      clearInterval(this.state.interval);\n      if (this.props.showTask) {\n        dispatch({type: 'FETCH_NETWORK', payload: false});\n      }else if(this.props.showNetwork){\n        dispatch({type: 'FETCH_SHOW_USERS', payload: false});\n      }\n    } else {\n      this.setState({elapsed: (this.state.elapsed - 1)});\n    }\n  }\n\n  onHandleOpen = () => {\n    if (this.state.inputOne===' '||\n      this.state.inputTwo===' '||\n      this.state.inputThree===' '||\n      this.state.inputFour==='' ||\n      this.state.inputFive===' '||\n      this.state.inputSix===' ') {\n        this.setState({showErr: true});\n    }else{\n      this.show('blurring');\n      this.setState({modalOpen: true});\n      return true;\n    }\n    return false;\n  }\n\n  onHandleClose = () => {\n    this.setState({modalOpen: false})\n  }\n\n  render() {\n\n    const modalContent = \"In this next section, we will show you what others in your network came up with! You will be able to edit your own list if you get any new ideas! But remember only UNIQUE ideas count - if you just copy from others, we'll know :p\" ;\n\n    const modalTimeContent = \"This is a time section\";\n\n    let isTimerActive = this.props.showTask;\n\n    let mainSegmentStyles = {\n      height: \"100%\",\n      paddingBottom: \"0em\"\n    };\n\n    let timeSegmentStyles = {\n      height: \"10em\"\n    };\n\n    let timeStyles = {\n      paddingTop: \"2em\",\n      fontSize: \"3em\",\n      color: \"#00B5AD\"\n    };\n\n    let welcomeStyles = {\n      color: \"#fff\",\n      paddingTop: \"2em\"\n    }\n\n    let textStyles = {\n      fontSize: \"1.4em\",\n      lineHeight: \"2em\"\n    };\n\n    let modalStyles = {\n      paddingRight: \"2em\"\n    };\n\n    return (\n      <div className=\"ui vertical segment\">\n        <Container textAlign='center' style={timeSegmentStyles}>\n          <Header style={timeStyles}>{this.onGetMinutes()}:{this.onGetSeconds()}</Header>\n\n        </Container>\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    showTask: state.showTask,\n    showNetwork: state.showNetwork,\n    showUsers: state.showUsers\n  }\n}\n\nexport default connect(mapStateToProps)(TaskTimerScreen);\n"]},"metadata":{},"sourceType":"module"}