{"ast":null,"code":"import _regeneratorRuntime from \"/Users/famousclark/Sites/creativity-project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(showTask),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(showNetwork),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(showUsers),\n    _marked4 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchForShowTask),\n    _marked5 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchForNetwork),\n    _marked6 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchForShowUsers),\n    _marked7 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(rootSaga);\n\nimport { delay } from 'redux-saga';\nimport { fork, put, takeEvery } from 'redux-saga/effects';\nexport function showTask(action) {\n  var isTaskActive;\n  return _regeneratorRuntime.wrap(function showTask$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          isTaskActive = !action.payload;\n          console.log(isTaskActive);\n          _context.next = 5;\n          return put({\n            type: 'FETCH_TASK_DONE',\n            result: isTaskActive\n          });\n\n        case 5:\n          _context.next = 11;\n          break;\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 11;\n          return put({\n            type: 'FETCH_TASK_FAILED',\n            message: _context.t0.message\n          });\n\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, this, [[0, 7]]);\n}\nexport function showNetwork(action) {\n  var isNetworkActive;\n  return _regeneratorRuntime.wrap(function showNetwork$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          isNetworkActive = !action.payload;\n          console.log(isNetworkActive);\n          _context2.next = 5;\n          return put({\n            type: 'FETCH_NETWORK_DONE',\n            result: isNetworkActive\n          });\n\n        case 5:\n          _context2.next = 11;\n          break;\n\n        case 7:\n          _context2.prev = 7;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 11;\n          return put({\n            type: 'FETCH_NETWORK_FAILED',\n            message: _context2.t0.message\n          });\n\n        case 11:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, this, [[0, 7]]);\n}\nexport function showUsers(action) {\n  var isUsersActive;\n  return _regeneratorRuntime.wrap(function showUsers$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          isUsersActive = !action.payload;\n          console.log(isUsersActive);\n          _context3.next = 5;\n          return put({\n            type: 'FETCH_SHOW_USERS_DONE',\n            result: isUsersActive\n          });\n\n        case 5:\n          _context3.next = 11;\n          break;\n\n        case 7:\n          _context3.prev = 7;\n          _context3.t0 = _context3[\"catch\"](0);\n          _context3.next = 11;\n          return put({\n            type: 'FETCH_SHOW_USERS_FAILED',\n            message: _context3.t0.message\n          });\n\n        case 11:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, this, [[0, 7]]);\n}\nexport function watchForShowTask() {\n  return _regeneratorRuntime.wrap(function watchForShowTask$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeEvery('FETCH_SHOW_TASK', showTask);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4, this);\n}\nexport function watchForNetwork() {\n  return _regeneratorRuntime.wrap(function watchForNetwork$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return takeEvery('FETCH_NETWORK', showNetwork);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, this);\n}\nexport function watchForShowUsers() {\n  return _regeneratorRuntime.wrap(function watchForShowUsers$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeEvery('FETCH_SHOW_USERS', showUsers);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6, this);\n}\nexport default function rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return [fork(watchForShowTask), fork(watchForNetwork), fork(watchForShowUsers)];\n\n        case 2:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7, this);\n}","map":{"version":3,"sources":["/Users/famousclark/Sites/creativity-project/src/middleware/Saga.jsx"],"names":["showTask","showNetwork","showUsers","watchForShowTask","watchForNetwork","watchForShowUsers","rootSaga","delay","fork","put","takeEvery","action","isTaskActive","payload","console","log","type","result","message","isNetworkActive","isUsersActive"],"mappings":";;;;yBAGiBA,Q;;;yBAUAC,W;;;yBAUAC,S;;;yBAUAC,gB;;;yBAIAC,e;;;yBAIAC,iB;;;yBAIQC,Q;;AA7CzB,SAASC,KAAT,QAAsB,YAAtB;AACA,SAASC,IAAT,EAAeC,GAAf,EAAoBC,SAApB,QAAqC,oBAArC;AAEA,OAAO,SAAUV,QAAV,CAAmBW,MAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEGC,UAAAA,YAFH,GAEkB,CAACD,MAAM,CAACE,OAF1B;AAGHC,UAAAA,OAAO,CAACC,GAAR,CAAYH,YAAZ;AAHG;AAIH,iBAAMH,GAAG,CAAC;AAAEO,YAAAA,IAAI,EAAE,iBAAR;AAA2BC,YAAAA,MAAM,EAAEL;AAAnC,WAAD,CAAT;;AAJG;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAMH,iBAAMH,GAAG,CAAC;AAAEO,YAAAA,IAAI,EAAE,mBAAR;AAA6BE,YAAAA,OAAO,EAAE,YAAEA;AAAxC,WAAD,CAAT;;AANG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUP,OAAO,SAAUjB,WAAV,CAAsBU,MAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEGQ,UAAAA,eAFH,GAEqB,CAACR,MAAM,CAACE,OAF7B;AAGHC,UAAAA,OAAO,CAACC,GAAR,CAAYI,eAAZ;AAHG;AAIH,iBAAMV,GAAG,CAAC;AAAEO,YAAAA,IAAI,EAAE,oBAAR;AAA8BC,YAAAA,MAAM,EAAEE;AAAtC,WAAD,CAAT;;AAJG;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAMH,iBAAMV,GAAG,CAAC;AAAEO,YAAAA,IAAI,EAAE,sBAAR;AAAgCE,YAAAA,OAAO,EAAE,aAAEA;AAA3C,WAAD,CAAT;;AANG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUP,OAAO,SAAUhB,SAAV,CAAoBS,MAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEGS,UAAAA,aAFH,GAEmB,CAACT,MAAM,CAACE,OAF3B;AAGHC,UAAAA,OAAO,CAACC,GAAR,CAAYK,aAAZ;AAHG;AAIH,iBAAMX,GAAG,CAAC;AAAEO,YAAAA,IAAI,EAAE,uBAAR;AAAiCC,YAAAA,MAAM,EAAEG;AAAzC,WAAD,CAAT;;AAJG;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAMH,iBAAMX,GAAG,CAAC;AAAEO,YAAAA,IAAI,EAAE,yBAAR;AAAmCE,YAAAA,OAAO,EAAE,aAAEA;AAA9C,WAAD,CAAT;;AANG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUP,OAAO,SAAUf,gBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACL,iBAAMO,SAAS,CAAC,iBAAD,EAAoBV,QAApB,CAAf;;AADK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIP,OAAO,SAAUI,eAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACL,iBAAMM,SAAS,CAAC,eAAD,EAAkBT,WAAlB,CAAf;;AADK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIP,OAAO,SAAUI,iBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACL,iBAAMK,SAAS,CAAC,kBAAD,EAAqBR,SAArB,CAAf;;AADK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIP,eAAe,SAAUI,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACb,iBAAM,CACJE,IAAI,CAACL,gBAAD,CADA,EAEJK,IAAI,CAACJ,eAAD,CAFA,EAGJI,IAAI,CAACH,iBAAD,CAHA,CAAN;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { delay } from 'redux-saga';\nimport { fork, put, takeEvery } from 'redux-saga/effects';\n\nexport function* showTask(action) {\n  try {\n    const isTaskActive = !action.payload;\n    console.log(isTaskActive);\n    yield put({ type: 'FETCH_TASK_DONE', result: isTaskActive });\n  } catch (e) {\n    yield put({ type: 'FETCH_TASK_FAILED', message: e.message });\n  }\n}\n\nexport function* showNetwork(action) {\n  try {\n    const isNetworkActive = !action.payload;\n    console.log(isNetworkActive);\n    yield put({ type: 'FETCH_NETWORK_DONE', result: isNetworkActive });\n  } catch (e) {\n    yield put({ type: 'FETCH_NETWORK_FAILED', message: e.message });\n  }\n}\n\nexport function* showUsers(action) {\n  try {\n    const isUsersActive = !action.payload;\n    console.log(isUsersActive);\n    yield put({ type: 'FETCH_SHOW_USERS_DONE', result: isUsersActive });\n  } catch (e) {\n    yield put({ type: 'FETCH_SHOW_USERS_FAILED', message: e.message });\n  }\n}\n\nexport function* watchForShowTask() {\n  yield takeEvery('FETCH_SHOW_TASK', showTask);\n}\n\nexport function* watchForNetwork() {\n  yield takeEvery('FETCH_NETWORK', showNetwork);\n}\n\nexport function* watchForShowUsers() {\n  yield takeEvery('FETCH_SHOW_USERS', showUsers);\n}\n\nexport default function* rootSaga() {\n  yield [\n    fork(watchForShowTask),\n    fork(watchForNetwork),\n    fork(watchForShowUsers)\n  ];\n}\n"]},"metadata":{},"sourceType":"module"}